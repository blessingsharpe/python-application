After provisioning my infrastrucure, i tried to create the eks cluster using terraform PLAN first and got the error below 
 terraform plan
╷
│ Error1: Invalid depends_on reference
│ 
│   on main.tf line 97, in resource "aws_eks_cluster" "pythonapp_cluster":
│   97:   depends_on = [aws_eks_cluster_auth.pythonapp_cluster.name]
│ 
│ References in depends_on must be to a whole object (resource, etc), not to an attribute of an object.
╵
╷
│ Error2: Invalid resource type
│ 
│   on main.tf line 149, in resource "aws_eks_cluster_auth" "pythonapp_cluster_auth":
│  149: resource "aws_eks_cluster_auth" "pythonapp_cluster_auth" {
│ 
│ The provider hashicorp/aws does not support resource type "aws_eks_cluster_auth".
│ 
│ Did you intend to use the data source "aws_eks_cluster_auth"? If so, declare this using a "data" block instead of a "resource" block.

SOLUTION
The error message you received indicates that you are using the depends_on attribute with an incorrect reference. In Terraform, the depends_on attribute should reference a resource object 
and (aws_eks_cluster_auth) is not a RESOURCE object


I got another error while creating the worker nodes, it needed subnet ids and i referenced only the private id of subnet but it didnt fix it 
so i referenced both private and public subnets and ran terraform plan again and it worked



ERROR3:
waiting for EKS Node Group (python-eks-cluster:pythonapp-node-group) to create: unexpected state 'CREATE_FAILED', wanted target 'ACTIVE'. last error: 1 error occurred:
│       * i-0eee4339e8463f817: NodeCreationFailure: Instances failed to join the kubernetes cluster
with aws_eks_node_group.pythonapp_workers,
│   on main.tf line 100, in resource "aws_eks_node_group" "pythonapp_workers":
│  100: resource "aws_eks_node_group" "pythonapp_workers" {

The error states that the (NODEGROUP)EC2 instance ROLES does not have the necessary permission to inetract with the eks cluster
i had to ensure the IAM ROLE attached to the NODEGROUP is correct to be able to have the necessary permission to interact with the cluster or you can SSH directly into the EC2 servers
using a generated key to know what is going on with the servers

solution: i had to check the IAM plocy again foe nodegroup for the necessary permission to interact with the cluster and it was well, i also attached the necessary permision


Error: creating EC2 Subnet: InvalidParameterValue: Value (us-east-2b) for parameter availabilityZone is invalid. Subnets can currently only be created in the following availability zones: us-west-2a, us-west-2b, us-west-2c, us-west-2d.
│       status code: 400, request id: c46036b4-79ea-443d-b659-116c4c8a9eda
│ 
│   with aws_subnet.private_subnet_docker,
│   on main.tf line 39, in resource "aws_subnet" "private_subnet_docker":
│   39: resource "aws_subnet" "private_subnet_docker" {




Error: Incorrect attribute value type
│ 
│   on main.tf line 91, in resource "aws_instance" "docker_registry":
│   91:   instance_type   = var.docker_registry_instance_type
│     ├────────────────
│     │ var.docker_registry_instance_type is a list of string, known only after apply
│ 
│ Inappropriate value for attribute "instance_type": string required



Error: Incorrect attribute value type

  on main.tf line 89, in resource "aws_instance" "docker_registry":
  89:   instance_type   = var.docker_registry_instance_type

Inappropriate value for attribute "instance_type": string required.

************aws_vpc.docker_vpc.id.private_subnet[count.index].id



Error: Unsupported attribute

  on main.tf line 135, in resource "aws_eks_node_group" "pythonapp_workers":
 135:   subnet_ids      = aws_vpc.docker_vpc.id.private_subnet[count.index].id

This value does not have any attributes, i used this for subnet id instead subnet id = [for i in aws_subnet.private_subnet : i.id]


Error: waiting for EKS Node Group (python-eks-cluster:pythonapp-node-group) to create: unexpected state 'CREATE_FAILED', wanted target 'ACTIVE'. last error: 1 error occurred:
        * i-0c560bcc157d34a25: NodeCreationFailure: Instances failed to join the kubernetes cluster



  on main.tf line 131, in resource "aws_eks_node_group" "pythonapp_workers":
 131: resource "aws_eks_node_group" "pythonapp_workers" {



Error: waiting for EKS Node Group (python-eks-cluster:pythonapp-node-group) to create: unexpected state 'CREATE_FAILED', wanted target 'ACTIVE'. last error: 1 error occurred:
        * i-0c560bcc157d34a25: NodeCreationFailure: Instances failed to join the kubernetes cluster



  on main.tf line 131, in resource "aws_eks_node_group" "pythonapp_workers":
 131: resource "aws_eks_node_group" "pythonapp_workers" {       this is saying the nodegroup needs some permissions to join the eks cluster like createnode group, decsribecluster etc and attach the 
 IAM policy to the nodegroup IAM role




 Enumerating objects: 26, done.
Counting objects: 100% (26/26), done.
Delta compression using up to 2 threads
Compressing objects: 100% (15/15), done.
Writing objects: 100% (21/21), 76.56 MiB | 4.48 MiB/s, done.
Total 21 (delta 6), reused 0 (delta 0)
remote: Resolving deltas: 100% (6/6), completed with 3 local objects.
remote: error: Trace: e0b0fbc0937545a4ddf33b81f49a57e7e253c36c8d2204b794e8bc45a26c211a
remote: error: See https://gh.io/lfs for more information.
remote: error: File .terraform/providers/registry.terraform.io/hashicorp/aws/4.67.0/linux_amd64/terraform-provider-aws_v4.67.0_x5 is 345.04 MB; this exceeds GitHub's file size limit of 100.00 MB
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
To https://github.com/blessingsharpe/python-web-application.git
 ! [remote rejected] main -> main (pre-receive hook declined)
error: failed to push some refs to 'https://github.com/blessingsharpe/python-web-application.git'



docker ps 
docker images
use any image from docker hub, i choise nginx latest pulled nginx image from docker hub
docker run -d -p 5000:5000 --name docker-registry-nginx nginx:latest

binding host port 5000 to container port 5000 in detach mode, creating a new container(dockerregistry-nginx) using nginx latest image 
docker ps to see container running(means our dockerresgistry is running now)


how to check if this regisry has images inside? yes
for this, get ip of local machine first using ip addr for terminal or ubuntu and ipconfig for gitbash
172.25.208.1   ipv4 is the ip address
 ******curl -X GET http://172.25.208.1:5000/v2/_catalog

  "insecure-registries":["172.25.208.1:5000"]     
 add this to your docker daemon json file on docker desktop or in /etc/docker/daemon.json

no need using this as i used the one below docker run -d -p 5000:5000 --name docker-registry-nginx nginx:latest
 *******docker run -d -p 5000:5000 --restart=always --name docker-registry-nginx -v $(pwd)/docker-registry:/var/lib/docker-registry-nginx nginx:latest
now local dockder registry is running, i cd to local docker registry folder and saw that i had some running containers but i want to test  if i can tag an existing image like nginx to nginx-v2 and push to this new docker registry specifying it's full path like(ip address and portnumber)
******docker tag nginx 172.25.208.1:5000/nginx-v2    (i was able to tag it)

*****docker ps to see new tagged image 

now let me push it to local docker registry but this would require some security protocol like TLS/SSL but since this is for testing, i would add an "insecure-regsitries" line to my docker/daemon.json file to bypass this error

****docker push 172.25.208.1:5000/nginx-v2 and i got an error






ERRORS with PROJECT
while trying to create the container for the docker rgeistry, i had an error saying the port number of my host is already in use which was port 5000 so i used port 5001
second error was the container name i was trying to use was already in use, so i had check all running containers and stop the particular container with the name i wanted and deleted it as i was not using the container at that time, i reran the docker run command and it worked 

while trying to push new tagged image to registry, i got an error saying "server gave http response to https client" which means it needed TLS certificates authentication to make it secure for https response so this was where i had to add the "insecure-registries" to the docker daemon json file and restart docker desktop or server to tell it the regisry is secure 

i got this error below when i tried to push to local docker registry
docker push  172.25.208.1:5000/nginx-v2
Using default tag: latest
The push refers to repository [172.25.208.1:5000/nginx-v2]
Get "http://172.25.208.1:5000/v2/": EOF

what i did to solve it was go to my docker desktop and configured my docker client to use the http proxy settings 

